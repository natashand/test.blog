<?php

namespace app\controllers;

use app\models\Answers;
use app\models\Articles;
use app\models\PassedTestForm;
use app\models\PassedTests;
use app\models\Questions;
use app\models\Tests;
use Yii;
use yii\data\Pagination;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\web\Response;
use yii\filters\VerbFilter;
use app\models\LoginForm;
use app\models\ContactForm;

class SiteController extends Controller
{
    public function init()
    {
        $this->enableCsrfValidation = false;
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout'],
                'rules' => [
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    /**
     * Displays homepage.
     *
     * @return string
     */
    public function actionIndex()
    {

        return $this->render('index');
    }

    /**
     * Displays contact page.
     *
     * @return Response|string
     */
    public function actionContact()
    {
        $model = new ContactForm();
        if ($model->load(Yii::$app->request->post()) && $model->contact(Yii::$app->params['adminEmail'])) {
            Yii::$app->session->setFlash('contactFormSubmitted');

            return $this->refresh();
        }
        return $this->render('contact', [
            'model' => $model,
        ]);
    }

    /**
     * Displays about page.
     *
     * @return string
     */
    public function actionAbout()
    {
        return $this->render('about');
    }


    public function actionArticle($page = 1)
    {
        $count = Articles::find()->count();
        $limit = 4;
        $position = (($page - 1) * $limit);
        $pagination = intval(ceil($count / $limit));
        $articles = Articles::find()->offset($position)->limit(4)->all();
        return $this->render('article', [
            'articles' => $articles,
            'pagination' => $pagination
        ]);
    }

    public function actionZadachi($page = 1)
    {
        $count = Tests::find()->where(['categoryID' => 4])->count();
        $limit = 1;
        $position = (($page - 1) * $limit);
        $pagination = intval(ceil($count / $limit));
        $tests = Tests::find()->offset($position)->limit(1)->all();
        $questions = Questions::find()->all();


        return $this->render('zadachi', [
            'tests' => $tests,
            'questions' => $questions,
            'pagination' => $pagination
        ]);
    }

    public function actionAnswer($id, $page = 1)
    {
        $count = Tests::find()->where(['categoryID' => 4])->count();
        $limit = 1;
        $position = (($page - 1) * $limit);
        $pagination = intval(ceil($count / $limit));
        $tests = Tests::find()->offset($position)->limit(1)->all();
        $questions = Questions::findOne($id);
        $answers = Answers::findOne($id);
        return $this->render('answer', [
            'answers' => $answers,
            'tests' => $tests,
            'questions' => $questions,
            'pagination' => $pagination
        ]);
    }

    public function actionList()
    {

        $tests = Tests::find()->where(['categoryID' => 3])->all();

        return $this->render('listest', [
            'tests' => $tests
        ]);
    }

    public function actionTest($id)
    {

        if (Yii::$app->request->isPost) {
            return $this->redirect(['result']);
        }
        $tests = Tests::findOne($id);
        $questions = Questions::find()->where(['testID' => $id])->all();
        $answers = Answers::find()->all();

        return $this->render('test', [
            'answers' => $answers,
            'tests' => $tests,
            'questions' => $questions,

        ]);
    }

    public function actionResult($id)
    {
        $this->enableCsrfValidation = false;
        $passedTest = new PassedTests();
        $passedTest->load(Yii::$app->request->post());
        $tests = Tests::findOne($id);
            $post = Yii::$app->request->post();
            $mass = [];
            foreach ($post as $value) {
                $answer = Answers::findOne($value);
                if ($answer->right_ans == 1) {
                    $mass[] = $answer;
                }
            }
            $passedTest->testID = $tests->id;
            $passedTest->studentID = Yii::$app->user->id;
            $passedTest->result = count($mass);
            $passedTest->save();

        return $this->render('result', [
            'mass' => $mass
        ]);
    }


}
